// ✅ File: /app.js

document.addEventListener("DOMContentLoaded", () => {
  const input = document.getElementById("refInput");

  // Trigger lookup when Enter is pressed
  input.addEventListener("keydown", function (e) {
    console.log("Key pressed:", e.key);
    if (e.key === "Enter") {
      console.log("Enter pressed, triggering lookup");
      lookupReference();
    }
  });
});

async function lookupReference() {
  const ref = document.getElementById("refInput").value.trim();
  if (!ref) return;

  console.log("Looking up reference:", ref);

  try {
    const response = await fetch("/.netlify/functions/chatgpt-lookup", {
      method: "POST",
      body: JSON.stringify({ reference: ref }),
      headers: { "Content-Type": "application/json" }
    });

    const data = await response.json();
    console.log("API Response:", data);

    if (data.error) {
      document.getElementById("result").innerHTML = `<p>Error: ${data.error}</p>`;
      return;
    }

    // Get image path from local or fallback
    const refFormatted = data.reference.replace(/\//g, "-");
    const imageInfo = await getImagePath(refFormatted);

    const html = `
      <p><strong>Reference:</strong> ${data.reference}</p>
      <p><strong>Retail Price:</strong> ${data.retail_price}</p>
      <p><strong>Collection:</strong> ${data.collection}</p>
      <p><strong>Dial:</strong> ${data.dial}</p>
      <p><strong>Case:</strong> ${data.case}</p>
      <p><strong>Bracelet:</strong> ${data.bracelet}</p>
      <p><strong>Movement:</strong> ${data.movement}</p>
      <img src="${imageInfo.src}" alt="Watch Image" class="watch-image">
      ${imageInfo.source === 'chatgpt' ? '<p style="color: red;"><em>Image generated by AI as a backup.</em></p>' : ''}
    `;

    document.getElementById("result").innerHTML = html;

  } catch (err) {
    console.error("Lookup failed:", err);
    document.getElementById("result").innerHTML = `<p>Error: ${err.message}</p>`;
  }
}

// Helper to check for local image and fall back to AI
async function getImagePath(refFormatted) {
  const localPath = `images/${refFormatted}.avif`;

  return new Promise((resolve) => {
    const img = new Image();
    img.src = localPath;

    img.onload = () => resolve({ src: localPath, source: 'local' });

    img.onerror = async () => {
      try {
        const res = await fetch("/.netlify/functions/getImageBackup", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ reference: refFormatted })
        });

        const data = await res.json();

        if (!data.imageUrl) {
          throw new Error(data.error || "No image URL returned");
        }

        return resolve({ src: data.imageUrl, source: 'chatgpt' });

      } catch (err) {
        console.error("Fallback image fetch failed:", err);
        return resolve({ src: '', source: 'none' });
      }
    };
  });
}

// ✅ Expose function to HTML onclick
window.lookupReference = lookupReference;

